// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TouchpointSource {
  MANUAL
  EMAIL
  SMS
  PHONE
  IN_PERSON
  EVENT
  OTHER
  @@map("touchpoint_source")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  validated Boolean  @default(false)

  contacts Contact[]

  @@map("users")
}

model Contact {
  id                 Int      @id @default(autoincrement())
  name               String
  primaryEmail       String   @map("primary_email")
  secondaryEmail     String?  @map("secondary_email")
  primaryPhone       String?  @map("primary_phone")
  secondaryPhone     String?  @map("secondary_phone")
  company            String?
  industry           String?
  website            String?
  address            String?
  notes              String?
  linkedinUrl        String?  @map("linkedin_url")
  facebookUrl        String?  @map("facebook_url")
  instagramUrl       String?  @map("instagram_url")
  youtubeUrl         String?  @map("youtube_url")
  tiktokUrl          String?  @map("tiktok_url")
  source             String?
  status             String   @default("PROSPECT")
  sentiment          String   @default("NEUTRAL")
  leadScore          Decimal? @map("lead_score") @db.Decimal(3, 2)
  opportunityScore   Decimal? @map("opportunity_score") @db.Decimal(3, 2)
  userId             Int      @map("user_id")
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt          DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)

  // Normalized/Derived fields for deduplication
  firstNameNorm   String?   @map("first_name_norm")
  lastNameNorm    String?   @map("last_name_norm")
  fullNameNorm    String?   @map("full_name_norm")
  emailNorm       String?   @map("email_norm")
  emailLocal      String?   @map("email_local")
  emailDomain     String?   @map("email_domain")
  phoneE164       String?   @map("phone_e164")
  companyNorm     String?   @map("company_norm")
  websiteRoot     String?   @map("website_root")
  addressNorm     String?   @map("address_norm")
  zipNorm         String?   @map("zip_norm")
  soundexLast     String?   @map("soundex_last")
  metaphoneLast   String?   @map("metaphone_last")
  deletedAt       DateTime? @map("deleted_at") @db.Timestamptz()

  // Multi-channel identity
  otherEmails     String[]  @default([]) @map("other_emails")
  otherPhones     String[]  @default([]) @map("other_phones")

  // Company relation (optional)
  companyId       Int?      @map("company_id")

  user        User         @relation(fields: [userId], references: [id])
  companyRecord Company?    @relation(fields: [companyId], references: [id])
  touchpoints Touchpoint[]
  avatars     Avatar[]

  @@map("contacts")
  @@index([emailNorm], map: "idx_contacts_email_norm")
  @@index([phoneE164], map: "idx_contacts_phone_e164")
  @@index([websiteRoot], map: "idx_contacts_website_root")
  @@index([emailDomain], map: "idx_contacts_email_domain")
  @@index([zipNorm], map: "idx_contacts_zip_norm")
}

model Company {
  id           Int       @id @default(autoincrement())
  name         String
  nameNorm     String?   @map("name_norm")
  website      String?
  websiteRoot  String?   @map("website_root")
  domainVerified Boolean? @default(false) @map("domain_verified")
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  contacts     Contact[]

  @@map("companies")
  @@index([websiteRoot], map: "idx_companies_website_root")
  @@index([nameNorm], map: "idx_companies_name_norm")
}

model Avatar {
  id                 BigInt   @id @default(autoincrement())
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt          DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  contactId          Int?     @map("contact_id")
  fullName           String   @map("full_name")
  replicateModelUrl  String   @unique @map("replicate_model_url")
  triggerWord        String   @map("trigger_word")
  description        String?
  visible            Boolean  @default(true)

  contact           Contact?           @relation(fields: [contactId], references: [id])
  generatedAvatars  AvatarGenerated[]

  @@map("avatars")
}

model AvatarGenerated {
  id             BigInt   @id @default(autoincrement())
  avatarId       BigInt   @map("avatar_id")
  prompt         String
  githubImageUrl String   @map("github_image_url")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamp(3)

  avatar Avatar @relation(fields: [avatarId], references: [id], onDelete: Cascade)

  @@map("avatars_generated")
}

// NEW: For Avatar Generator system
model AvatarGeneration {
  id                  Int      @id @default(autoincrement())
  prompt              String
  loraRepository      String?  @map("lora_repository") @db.VarChar(255)
  loraScale           Decimal? @default(1.0) @map("lora_scale") @db.Decimal(3, 2)
  guidanceScale       Decimal? @default(3.5) @map("guidance_scale") @db.Decimal(4, 1)
  numInferenceSteps   Int?     @default(28) @map("num_inference_steps")
  seed                Int?
  aspectRatio         String?  @default("1:1") @map("aspect_ratio") @db.VarChar(10)
  outputFormat        String?  @default("webp") @map("output_format") @db.VarChar(10)
  outputQuality       Int?     @default(80) @map("output_quality")
  safetyChecker       Boolean? @default(true) @map("safety_checker")
  status              String   @default("pending") @db.VarChar(20)
  imageUrl            String?  @map("image_url")
  replicateId         String?  @map("replicate_id") @db.VarChar(255)
  errorMessage        String?  @map("error_message")
  confidence          Decimal? @map("confidence") @db.Decimal(3, 2)
  processingTime      Int?     @map("processing_time")
  createdAt           DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt           DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)

  @@map("avatar_generations")
}

// NEW: For Chatbot Logs system
model ChatbotConversation {
  id             Int      @id @default(autoincrement())
  sessionId      String   @map("session_id") @db.VarChar(255)
  userId         String?  @map("user_id") @db.VarChar(255)
  userMessage    String   @map("user_message")
  botResponse    String   @map("bot_response")
  context        String?
  intent         String?  @db.VarChar(100)
  confidence     Decimal? @db.Decimal(3, 2)
  responseTime   Int?     @map("response_time")
  feedbackRating Int?     @map("feedback_rating")
  metadata       String?
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)

  @@map("chatbot_conversations")
}

// NEW: For Smart Assistant system
model AssistantQuery {
  id             Int      @id @default(autoincrement())
  naturalQuery   String   @map("natural_query")
  generatedSQL   String?  @map("generated_sql")
  explanation    String?
  resultCount    Int      @default(0) @map("result_count")
  status         String   @default("pending") @db.VarChar(20)
  errorMessage   String?  @map("error_message")
  context        String?
  executionTime  Int?     @map("execution_time")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamp(3)

  @@map("assistant_queries")
}

model BlogPost {
  id               Int           @id @default(autoincrement())
  title            String        @db.VarChar(500)
  slug             String        @unique @db.VarChar(500)
  content          String
  excerpt          String?
  tags             String?
  metaDescription  String?       @map("meta_description") @db.VarChar(160)
  metaKeywords     String?       @map("meta_keywords")
  seoScore         Decimal?      @default(0.0) @map("seo_score") @db.Decimal(3, 2)
  featuredImageUrl String?       @map("featured_image_url")
  status           String?       @default("published") @db.VarChar(20)
  isFeatured       Boolean?      @default(false) @map("is_featured")
  viewCount        Int?          @default(0) @map("view_count")
  readTimeMinutes  Int?          @map("read_time_minutes")
  publishedAt      DateTime?     @default(now()) @map("published_at")
  createdAt        DateTime?     @default(now()) @map("created_at")
  updatedAt        DateTime?     @default(now()) @updatedAt @map("updated_at")
  createdByLlm     Boolean?      @default(true) @map("created_by_llm")
  llmPrompt        String?       @map("llm_prompt")
  
  // Category relation
  categoryId       Int?          @map("category_id")
  category         BlogCategory? @relation("BlogPostCategory", fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("blog_posts")
}

model ChatSummary {
  id                   Int      @id @default(autoincrement())
  interactionDate      DateTime @map("interaction_date") @db.Date
  contactName          String?  @map("contact_name") @db.VarChar(255)
  contactEmail         String?  @map("contact_email") @db.VarChar(255)
  contactPhone         String?  @map("contact_phone") @db.VarChar(50)
  companyName          String?  @map("company_name") @db.VarChar(255)
  chatSummary          String   @map("chat_summary")
  servicesDiscussed    Json?    @default("[]") @map("services_discussed")
  keyPainPoints        Json?    @default("[]") @map("key_pain_points")
  callToActionOffered  Boolean? @default(false) @map("call_to_action_offered")
  nextStep             String?  @map("next_step")
  leadQualification    String?  @default("Cold") @map("lead_qualification") @db.VarChar(10)
  createdAt            DateTime? @default(now()) @map("created_at") @db.Timestamptz()

  @@map("chat_summaries")
}

model ConversationContext {
  id                    Int       @id @default(autoincrement())
  sessionId             String    @unique @map("session_id") @db.VarChar(255)
  userInfo              Json?     @default("{}") @map("user_info")
  conversationStage     String?   @default("greeting") @map("conversation_stage") @db.VarChar(50)
  servicesDiscussed     Json?     @default("[]") @map("services_discussed")
  painPoints            Json?     @default("[]") @map("pain_points")
  lastInteraction       DateTime? @map("last_interaction") @db.Timestamptz()
  messageCount          Int?      @default(0) @map("message_count")
  conversationQuality   Decimal?  @default(0.5) @map("conversation_quality") @db.Decimal(3, 2)
  userSentiment         String?   @default("neutral") @map("user_sentiment") @db.VarChar(20)
  createdAt             DateTime? @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt             DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("conversation_contexts")
}

model Event {
  id              Int      @id @default(autoincrement())
  eventDate       DateTime? @map("event_date") @db.Timestamp(3)
  eventName       String?   @map("event_name")
  eventAddress    String?   @map("event_address")
  eventType       String?   @map("event_type")
  eventDescription String?  @map("event_description")
  eventCapacity   Int?      @map("event_capacity")
  eventStatus     String?   @map("event_status")
  dt              DateTime  @default(now()) @db.Timestamp(3)
  dtUpdated       DateTime  @default(now()) @updatedAt @map("dt_updated") @db.Timestamp(3)

  participants EventParticipant[]

  @@unique([eventName, eventType], name: "idx_events_unique")
  @@map("events")
}

model EventParticipant {
  id          Int      @id @default(autoincrement())
  eventId     Int?     @map("event_id")
  fullName    String?  @map("full_name")
  email       String?
  phone       String?
  companyName String?  @map("company_name")
  website     String?
  notes       String?
  dt          DateTime @default(now()) @db.Timestamp(3)
  dtUpdated   DateTime @default(now()) @updatedAt @map("dt_updated") @db.Timestamp(3)

  event Event? @relation(fields: [eventId], references: [id], onDelete: SetNull)

  @@unique([eventId, email], name: "idx_participants_unique")
  @@map("event_participants")
}

model Touchpoint {
  id        Int              @id @default(autoincrement())
  note      String
  source    TouchpointSource @default(MANUAL)
  contactId Int              @map("contact_id")
  createdAt DateTime         @default(now()) @map("created_at") @db.Timestamp(3)
  addedBy   String?          @map("added_by") @db.VarChar(50)

  contact Contact @relation(fields: [contactId], references: [id], onDelete: Restrict)

  @@map("touchpoints")
}

model UseCase {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  slug        String    @unique @db.VarChar(255)
  industry    String?   @db.VarChar(100)
  challenge   String?   @db.Text
  solution    String?   @db.Text
  results     String[]  @db.Text
  imageUrl    String?   @map("image_url") @db.VarChar(255)
  publishedAt DateTime? @default(now()) @map("published_at") @db.Timestamptz
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime? @default(now()) @map("updated_at") @db.Timestamptz

  @@map("use_cases")
} 

// Dedupe system tables
model DedupeCandidate {
  id          BigInt   @id @default(autoincrement())
  entityType  String   @default("contact") @map("entity_type")
  id1         BigInt
  id2         BigInt
  score       Decimal  @db.Decimal(5, 3)
  reason      String?
  status      String   @default("pending")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz()

  @@unique([entityType, id1, id2], map: "ux_dedupe_candidates_entity_ids")
  @@map("dedupe_candidates")
}

model DedupeMerge {
  id          BigInt   @id @default(autoincrement())
  entityType  String   @map("entity_type")
  survivorId  BigInt   @map("survivor_id")
  mergedId    BigInt   @map("merged_id")
  score       Decimal? @db.Decimal(5, 3)
  mode        String
  performedBy String?  @map("performed_by")
  details     Json?
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz()

  @@map("dedupe_merges")
}

model JobQueue {
  id        BigInt   @id @default(autoincrement())
  type      String
  payload   Json
  status    String   @default("queued")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime? @map("updated_at") @db.Timestamptz()

  @@index([type, status], map: "idx_job_queue_type_status")
  @@map("job_queue")
}

model ContentSetting {
  id           Int       @id @default(autoincrement())
  kind         String    @db.VarChar(20) // 'BLOG' | 'USE_CASE'
  instructions String?
  config       Json?     @default("{}")
  frequency    String?   @default("weekly") @db.VarChar(20) // 'off' | 'weekly' | 'biweekly'
  dayOfWeek    Int?      @default(1) // 0=Sunday ... 6=Saturday
  timeLocal    String?   @default("10:00") @map("time_local") @db.VarChar(10)
  timezone     String?   @default("America/Chicago") @db.VarChar(64)
  enabled      Boolean?  @default(true)
  lastRunAt    DateTime? @map("last_run_at") @db.Timestamptz()
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  @@unique([kind], name: "ux_content_setting_kind")
  @@map("content_settings")
}

model BlogCategory {
  id          Int            @id @default(autoincrement())
  name        String         @unique @db.VarChar(100)
  slug        String         @unique @db.VarChar(100)
  description String?
  isActive    Boolean        @default(true) @map("is_active")
  createdAt   DateTime       @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  
  // Relations
  schedules   BlogSchedule[]
  posts       BlogPost[]     @relation("BlogPostCategory")

  @@map("blog_categories")
}

model BlogSchedule {
  id           Int          @id @default(autoincrement())
  name         String       @db.VarChar(200) // User-friendly name for this schedule
  categoryId   Int          @map("category_id")
  topics       Json         @default("[]") // Array of 5 topic strings
  
  // Scheduling configuration
  frequency    String       @db.VarChar(20) // 'daily', 'weekly', 'monthly'
  weeklyDays   Json?        @default("[]") @map("weekly_days") // Array of day numbers [0,1,2,3,4,5,6] for weekly
  monthlyDay   Int?         @map("monthly_day") // Day of month (1-28) for monthly
  timeLocal    String       @map("time_local") @db.VarChar(10) // HH:MM format
  timezone     String       @default("America/Chicago") @db.VarChar(64)
  
  // Prompt configuration
  generalPrompt  String     @default("") @map("general_prompt")
  negativePrompt String     @default("") @map("negative_prompt")
  
  // Status and control
  isActive     Boolean      @default(true) @map("is_active")
  isPaused     Boolean      @default(false) @map("is_paused")
  lastRunAt    DateTime?    @map("last_run_at") @db.Timestamptz
  nextRunAt    DateTime?    @map("next_run_at") @db.Timestamptz
  
  // Metadata
  createdAt    DateTime     @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  
  // Relations
  category     BlogCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("blog_schedules")
}

// Gmail OAuth2 Integration
model GmailAccount {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  displayName  String?  @map("display_name")
  refreshToken String   @map("refresh_token") // Long-lived token for getting access tokens
  accessToken  String?  @map("access_token") // Short-lived token (we'll refresh this)
  tokenExpiry  DateTime? @map("token_expiry") @db.Timestamptz
  scopes       String[] @default([]) // OAuth2 scopes granted
  isActive     Boolean  @default(true) @map("is_active")
  lastSyncAt   DateTime? @map("last_sync_at") @db.Timestamptz
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  
  @@map("gmail_accounts")
}